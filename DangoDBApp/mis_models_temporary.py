from django.db import models

class Campus(models.Model):
    campusName = models.CharField(max_length=255)
    campusAddress = models.CharField(max_length=255)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class Department(models.Model):
    campus = models.ForeignKey(Campus, on_delete=models.CASCADE)
    departmentCode = models.CharField(max_length=255)
    departmentName = models.CharField(max_length=255)
    departmentDean = models.CharField(max_length=255)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class Employee(models.Model):
    campus = models.ForeignKey(Campus, on_delete=models.SET_NULL, null=True)
    department = models.ForeignKey(Department, on_delete=models.SET_NULL, null=True)
    role = models.CharField(max_length=255)
    title = models.CharField(max_length=255, null=True)
    firstName = models.CharField(max_length=255)
    middleName = models.CharField(max_length=255, null=True)
    lastName = models.CharField(max_length=255)
    qualifications = models.JSONField(null=True)
    gender = models.CharField(max_length=10)
    address = models.CharField(max_length=95)
    birthDate = models.DateField()
    contactNumber = models.CharField(max_length=15)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class Account(models.Model):
    employee = models.OneToOneField(Employee, on_delete=models.CASCADE)
    email = models.EmailField(unique=True)
    passwordHash = models.CharField(max_length=255, null=True)
    acceptTerms = models.BooleanField(null=True)
    verificationToken = models.CharField(max_length=255, null=True)
    verified = models.DateTimeField(null=True)
    resetToken = models.CharField(max_length=255, null=True)
    resetTokenExpires = models.DateTimeField(null=True)
    passwordReset = models.DateTimeField(null=True)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)

class Program(models.Model):
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    programCode = models.CharField(max_length=50)
    programDescription = models.CharField(max_length=255)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class Applicant(models.Model):
    firstName = models.CharField(max_length=35)
    middleName = models.CharField(max_length=35, null=True)
    lastName = models.CharField(max_length=35)
    suffix = models.CharField(max_length=10, null=True)
    gender = models.CharField(max_length=10)
    birthDate = models.DateField()
    email = models.EmailField()
    contactNumber = models.CharField(max_length=15)
    address = models.CharField(max_length=255)
    yearLevel = models.CharField(max_length=20)
    isTransferee = models.BooleanField()
    campus = models.ForeignKey(Campus, on_delete=models.CASCADE)
    program = models.ForeignKey(Program, on_delete=models.CASCADE, null=True)
    applicant_id_external = models.IntegerField(null=True)
    enrollmentType = models.CharField(max_length=20)
    status = models.CharField(max_length=20, default='pending')
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    dateEnrolled = models.DateTimeField(null=True)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class BuildingStructure(models.Model):
    campus = models.ForeignKey(Campus, on_delete=models.CASCADE)
    lot = models.CharField(max_length=25, null=True)
    buildingName = models.CharField(max_length=25, null=True)
    floorName = models.CharField(max_length=25, null=True)
    roomName = models.CharField(max_length=25, null=True)
    isBuilding = models.BooleanField(default=False)
    isFloor = models.BooleanField(default=False)
    isRoom = models.BooleanField(default=False)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class CourseInfo(models.Model):
    campus = models.ForeignKey(Campus, on_delete=models.CASCADE)
    department = models.ForeignKey(Department, on_delete=models.SET_NULL, null=True)
    courseCode = models.CharField(max_length=255)
    courseDescription = models.CharField(max_length=255)
    unit = models.IntegerField()
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class ProgramCourse(models.Model):
    program = models.ForeignKey(Program, on_delete=models.CASCADE)
    course = models.ForeignKey(CourseInfo, on_delete=models.CASCADE)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class Semester(models.Model):
    campus = models.ForeignKey(Campus, on_delete=models.CASCADE)
    semesterName = models.CharField(max_length=20)
    schoolYear = models.CharField(max_length=9)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class Class(models.Model):
    className = models.CharField(max_length=100)
    course = models.ForeignKey(CourseInfo, on_delete=models.CASCADE)
    semester = models.ForeignKey(Semester, on_delete=models.CASCADE)
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    schedule = models.TextField()
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class EnrollmentProcess(models.Model):
    applicant = models.OneToOneField(Applicant, on_delete=models.CASCADE)
    registrar_status = models.CharField(max_length=255, default='pending')
    registrar_status_date = models.DateTimeField(null=True)
    dean_status = models.CharField(max_length=255, default='pending')
    dean_status_date = models.DateTimeField(null=True)
    accounting_status = models.CharField(max_length=255, default='pending')
    accounting_status_date = models.DateTimeField(null=True)
    payment_confirmed = models.BooleanField(default=False)
    final_approval_status = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class History(models.Model):
    action = models.CharField(max_length=255)
    entity = models.CharField(max_length=255)
    entityId = models.IntegerField()
    changes = models.JSONField()
    timestamp = models.DateTimeField()
    account = models.ForeignKey(Account, on_delete=models.CASCADE)

class RefreshToken(models.Model):
    token = models.CharField(max_length=255, null=True)
    expires = models.DateTimeField(null=True)
    created = models.DateTimeField(auto_now_add=True)
    createdByIp = models.CharField(max_length=255, null=True)
    revoked = models.DateTimeField(null=True)
    revokedByIp = models.CharField(max_length=255, null=True)
    replacedByToken = models.CharField(max_length=255, null=True)
    account = models.ForeignKey(Account, on_delete=models.CASCADE, null=True)

class StudentOfficialBasic(models.Model):
    student_id = models.CharField(max_length=255)
    campus = models.ForeignKey(Campus, on_delete=models.CASCADE)
    firstName = models.CharField(max_length=35)
    middleName = models.CharField(max_length=35, null=True)
    lastName = models.CharField(max_length=35)
    suffix = models.CharField(max_length=35, null=True)
    gender = models.CharField(max_length=10)
    email = models.EmailField()
    contactNumber = models.CharField(max_length=15)
    address = models.CharField(max_length=255)
    yearLevel = models.CharField(max_length=255)
    program = models.CharField(max_length=255)
    isTransferee = models.BooleanField()
    birthDate = models.DateField()
    status = models.CharField(max_length=20)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ('student_id', 'campus')

class Prospectus(models.Model):
    program = models.ForeignKey(Program, on_delete=models.CASCADE)
    prospectusName = models.CharField(max_length=255)
    prospectusDescription = models.CharField(max_length=255)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class ProspectusSubject(models.Model):
    prospectus = models.ForeignKey(Prospectus, on_delete=models.CASCADE)
    yearLevel = models.CharField(max_length=255)
    course = models.ForeignKey(CourseInfo, on_delete=models.CASCADE)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)

class ProspectusPreRequisite(models.Model):
    prospectus_subject = models.ForeignKey(ProspectusSubject, on_delete=models.CASCADE)
    course = models.ForeignKey(CourseInfo, on_delete=models.CASCADE)
    isActive = models.BooleanField(default=True)
    isDeleted = models.BooleanField(default=False)
    createdAt = models.DateTimeField(auto_now_add=True)
    updatedAt = models.DateTimeField(auto_now=True)